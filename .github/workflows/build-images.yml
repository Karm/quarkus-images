name: Continuous Integration Build

on:
  pull_request:
      branches:
        - main
  push:
      branches:
        - main
      paths-ignore:
        - '.build/**'

jobs:
# bla bla bla
  build-images:
    name: Build images
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: "base images"
            modules: "quarkus-distroless-base-image,quarkus-micro-base-image"
            args: ""
          - name: "s2i binary images"
            modules: "quarkus-binary-s2i"
            args: ""
          - name: "s2i native images"
            modules: "quarkus-native-s2i"
            args: ""
          - name: "mandrel builder images (latest)"
            modules: "quarkus-mandrel-builder-image"
            args: ""
          - name: "mandrel builder images (23.0.x)"
            modules: "quarkus-mandrel-builder-image"
            args: "-Pmandrel-23.0.x"
          - name: "mandrel builder images (22.x)"
            modules: "quarkus-mandrel-builder-image"
            args: "-Pmandrel-22.x"
          - name: "graalvm ce builder images (latest)"
            modules: "quarkus-graalvm-builder-image"
            args: ""
          - name: "graalvm ce builder images 22.x"
            modules: "quarkus-graalvm-builder-image"
            args: "-Pgraalvm-22.x"

    steps:
    - name: Re-claim some disk space
      run: |
        sudo swapoff -a
        sudo rm -f /swapfile
        sudo apt-get clean
        docker rmi $(docker image ls -aq)
        df -h
    - uses: actions/checkout@v1
    - uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '17'
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v1
    - name: Set up Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@v1
      with:
        install: true
    - name: Inspect builder
      run: |
        echo "Name:      ${{ steps.buildx.outputs.name }}"
        echo "Endpoint:  ${{ steps.buildx.outputs.endpoint }}"
        echo "Status:    ${{ steps.buildx.outputs.status }}"
        echo "Flags:     ${{ steps.buildx.outputs.flags }}"
        echo "Platforms: ${{ steps.buildx.outputs.platforms }}"
    - name: Build ${{ matrix.name }}
      run: mvn install --projects ${{ matrix.modules }} --also-make -DskipTests ${{ matrix.args }}
    - name: Print ${{ matrix.name}}
      if: always()
      run: docker images
